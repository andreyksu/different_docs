Hibernate — пример отображения один ко многим One-To-Many и Many-To-One
https://javastudy.ru/hibernate/hibernate-one-to-many/

contact:
    id
    first_name
    last_name
    birth_date
    version
    
contact_tel_detail
    id
    contact_id (foreign key contact → id)
    tel_type
    tel_number
    version
    
package ru.javastudy.hibernate.dao;
 
import javax.persistence.*;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
 
/**
 * Created by Nick on 05.09.2015.
 */
@Entity
@Table(name = "contact", schema = "", catalog = "javastudy")
public class ContactEntity implements Serializable{
    private int id;
    private String firstName;
    private String lastName;
    private Date birthDate;
    private int version;
 
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) //generated DataBase auto_increment when insert value
    @Column(name = "id", nullable = false, insertable = true, updatable = true)
    public int getId() {
        return id;
    }
 
    public void setId(int id) {
        this.id = id;
    }
 
    @Basic
    @Column(name = "first_name", nullable = false, insertable = true, updatable = true, length = 60)
    public String getFirstName() {
        return firstName;
    }
 
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
 
    @Basic
    @Column(name = "last_name", nullable = false, insertable = true, updatable = true, length = 40)
    public String getLastName() {
        return lastName;
    }
 
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
 
    //NOTE THIS!
    @Temporal(TemporalType.DATE) //in table uses java.sql.Date, we use java.util.Date.
    @Column(name = "birth_date", nullable = true, insertable = true, updatable = true)
    public java.util.Date getBirthDate() {
        return birthDate;
    }
 
    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }
 
    //NOTE THIS!
    @Version  //используем механизм оптимистичной блокировки.
    @Column(name = "version", nullable = false, insertable = true, updatable = true)
    public int getVersion() {
        return version;
    }
 
    public void setVersion(int version) {
        this.version = version;
    }
 
    /*
    * EXAMPLE One To Many
    */
    private Set<ContactTelDetailEntity> contactTelDetails = new HashSet<ContactTelDetailEntity>();
 
    //Атрибут mappedBy задает свойство в классе ContactTelDetailEntity, которое предоставляет ассоциацию (т.е. связано с определением внешнего ключа в таблице CONTACT_TEL_DETAIL).
    //Атрибут cascade означает, что операция обновления должна распространяться на дочерние записи. Атрибут orphanRemoval указывает, что после обновления деталей телефонных номеров контакта записи, которые больше не существуют в наборе, должны быть удалены из базы данных.
    
    @OneToMany(mappedBy = "contact", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<ContactTelDetailEntity> getContactTelDetails() {
        return this.contactTelDetails;
    }
 
    public void setContactTelDetails(Set<ContactTelDetailEntity> contactTelDetails) {
        this.contactTelDetails = contactTelDetails;
    }
 
    public void addContactTelDetail(ContactTelDetailEntity contactTelDetail) {
        contactTelDetail.setContact(this);
        getContactTelDetails().add(contactTelDetail);
    }
 
    public void removeContactTelDetail(ContactTelDetailEntity contactTelDetail) {
        getContactTelDetails().remove(contactTelDetail);
    }
    
 
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
 
        ContactEntity that = (ContactEntity) o;
 
        if (id != that.id) return false;
        if (version != that.version) return false;
        if (firstName != null ? !firstName.equals(that.firstName) : that.firstName != null) return false;
        if (lastName != null ? !lastName.equals(that.lastName) : that.lastName != null) return false;
        if (birthDate != null ? !birthDate.equals(that.birthDate) : that.birthDate != null) return false;
 
        return true;
    }
 
    @Override
    public int hashCode() {
        int result = id;
        result = 31 * result + (firstName != null ? firstName.hashCode() : 0);
        result = 31 * result + (lastName != null ? lastName.hashCode() : 0);
        result = 31 * result + (birthDate != null ? birthDate.hashCode() : 0);
        result = 31 * result + version;
        return result;
    }
 
    @Override
    public String toString() {
        return "ContactEntity{" +
                "id=" + id +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", birthDate=" + birthDate +
                ", version=" + version +
                '}';
    }
}


import javax.persistence.*;
 
/**
 * Created by Nick on 05.09.2015.
 */
@Entity
@Table(name = "contact_tel_detail", schema = "", catalog = "javastudy")
public class ContactTelDetailEntity {
    private int id;
    private String telType;
    private String telNumber;
    private int version;
 
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, insertable = true, updatable = true)
    public int getId() {
        return id;
    }
 
    public void setId(int id) {
        this.id = id;
    }
 
    @Basic
    @Column(name = "tel_type", nullable = false, insertable = true, updatable = true, length = 20)
    public String getTelType() {
        return telType;
    }
 
    public void setTelType(String telType) {
        this.telType = telType;
    }
 
    @Basic
    @Column(name = "tel_number", nullable = false, insertable = true, updatable = true, length = 20)
    public String getTelNumber() {
        return telNumber;
    }
 
    public void setTelNumber(String telNumber) {
        this.telNumber = telNumber;
    }
 
    //NOTE THIS!
    @Version
    @Column(name = "version", nullable = false, insertable = true, updatable = true)
    public int getVersion() {
        return version;
    }
 
    public void setVersion(int version) {
        this.version = version;
    }
 
 
    /*
    * EXAMPLE Many To One
    */
    private ContactEntity contact;
 
    @ManyToOne
    @JoinColumn(name = "contact_id")
    public ContactEntity getContact() {
        return this.contact;
    }
 
    public void setContact(ContactEntity contact) {
        this.contact = contact;
    }
 
 
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
 
        ContactTelDetailEntity that = (ContactTelDetailEntity) o;
 
        if (id != that.id) return false;
        if (version != that.version) return false;
        if (telType != null ? !telType.equals(that.telType) : that.telType != null) return false;
        if (telNumber != null ? !telNumber.equals(that.telNumber) : that.telNumber != null) return false;
 
        return true;
    }
 
    @Override
    public int hashCode() {
        int result = id;
        result = 31 * result + (telType != null ? telType.hashCode() : 0);
        result = 31 * result + (telNumber != null ? telNumber.hashCode() : 0);
        result = 31 * result + version;
        return result;
    }
 
    @Override
    public String toString() {
        return "ContactTelDetailEntity{" +
                "id=" + id +
                ", contact id: " + getContact().getId() +
                ", telType='" + telType + '\'' +
                ", telNumber='" + telNumber + '\'' +
                ", version=" + version +
                ", contact=" + contact +
                '}';
    }
}